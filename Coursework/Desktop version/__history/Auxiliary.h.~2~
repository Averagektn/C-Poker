#pragma once

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define PLAYER          0
#define START_BALANCE   10000

#define DRAW            (-1)
#define OUT_OF_GAME     0
#define FOLD            1
#define CHECK           2
#define CALL            3
#define BET             4
#define ALL_IN          5

#define ACE             12
#define KING            11
#define QUEEN           10
#define JACK            9
#define TEN             8

#define VALUES          13
#define SUITS           4
#define COMBINATIONS    11
#define DECK_SIZE       52
#define CARD_BACK       52
#define PLAYER_CARDS    2
#define PLAYED          (-1)
#define BACK            (-1)

#define NOT_COMBINATION 0
#define HIGH_CARD       1
#define PAIR            2
#define TWO_PAIRS       3
#define THREE_OF_A_KIND 4
#define STRAIGHT        5
#define FLUSH           6
#define FULL_HOUSE      7
#define FOUR_OF_A_KIND  8
#define STRAIGHT_FLUSH  9
#define ROYAL_FLUSH     10
#define SF_CMB_LEN      4

#define BET_MULTIPLIER  0.05
#define BET_RATIO       10

#define TRUE            1
#define FALSE           0

#define FIRST_CARD      0
#define SECOND_CARD     1
#define TABLE_CARDS     5
#define PLAYERS         5
#define FLOP_CARDS      3
#define TURN_CARDS      4
#define RIVER_CARDS     5
#define TURN_CARD       3
#define RIVER_CARD      4
#define PREFLOP_CARDS   0

#define OUT_OF_BOUNDS(crd1, crd2) ((crd1) >= (crd2))

#define IS_ACE(crd) ((crd) == ACE)
#define IS_KING(crd) ((crd) == KING)
#define IS_QUEEN(crd) ((crd) == QUEEN)
#define IS_JACK(crd) ((crd) == JACK)
#define IS_TEN(crd) ((crd) == TEN)

#define IS_PAIR(crd1, crd2) ((crd1) == (crd2))
#define IS_THREE_OF_A_KIND(crd1, crd2, crd3) (IS_PAIR(crd1, crd2) && IS_PAIR(crd1, crd3))
#define IS_STRAIGHT(crd1, crd2) ((crd1 + 1) == (crd2))
#define IS_FOUR_OF_A_KIND(crd1, crd2, crd3, crd4) (IS_THREE_OF_A_KIND(crd1, crd2, crd3) && IS_PAIR(crd3, crd4))
#define IS_STRAIGHT_FLUSH(crd1, crd2) ((crd1) == (crd2) && crd1)
#define IS_ROYAL_FLUSH(a, k, q, j, ten) (IS_ACE(a) && IS_KING(k) && IS_QUEEN(q) && IS_JACK(j) && IS_TEN(ten))

#define STRAIGHT_CONTINUES(res, size, crd1, crd2) (((res) + 1) < (size) && ((crd1) == (crd2) || ((crd1) + 1) == (crd2)))
#define FLUSH_CONTINUES(res, size, crd1, crd2) (((res) + 1) < (size) && (crd1) == (crd2))

#define IS_BET(first, second) (((first) == (second)) || ((first) >= TEN && (second) >= TEN))
#define IS_CALL(v1, v2, s1, s2, balance, bet) (((v1 > TEN || v2 > TEN) || (s1 == s2)) && (balance / (bet + 1) > 2))

typedef struct Card {
	char suit, value;
}Card;

typedef struct Player {
	Card layout[PLAYER_CARDS];
	char bestCardValue, isPlaying, isAllIn;
    int balance, bet;
}Player;

typedef struct Table {
	Card layout[TABLE_CARDS];
	int atStake, call, cardsNum;
}Table;

int getCard(Card deck[]) {
	int crd;

	do {
		crd = (rand() % DECK_SIZE);
	} while (deck[crd].suit == PLAYED);

	return crd;
}

char cmp(char a, char b) {
    if (a > b)
		return a;
    return b;
}

void dealCard(Card* crd, Card deck[], int ind) {
	int random = getCard(deck);

    crd[ind] = deck[random];
	deck[random].suit = PLAYED;
	deck[random].value = PLAYED;
}

int findMaxIndex(const int a[], int size) {
    int max = 0;

    for (int i = 1; i < size; i++) {
        if (a[i] > a[max]) {
            max = i;
		}
	}

    return max;
}

char cmbPair(Card cards[], int* left, int size) {
	while (*left < size - 1) {
		if (IS_PAIR(cards[*left].value, cards[++(*left)].value)) {
			return (char)(cards[(*left)++].value) + 1;
		}
	}

	return NOT_COMBINATION;
}

int countPlayers(Player players[]){
	int counter = 0;

	for (int i = 0; i < PLAYERS; i++) {
		if (players[i].isPlaying) {
			counter++;
		}
	}

	return counter;
}

char cmbTwoPairs(Card cards[], int size) {
    int l = 0;
    char pairOne = cmbPair(cards, &l, size), pairTwo = cmbPair(cards, &l, size);

    if (pairOne && pairTwo) {
        return cmp(pairOne, pairTwo);
	}

	return NOT_COMBINATION;
}

char cmbThreeOfAKind(Card cards[], int* left, int size) {
	while (*left < size - 2) {
		if (IS_THREE_OF_A_KIND(cards[*left].value, cards[++(*left)].value, cards[++(*left)].value)) {
			return (char)(cards[(*left)++].value + 1);
        }
	}

    return NOT_COMBINATION;
}

char cmbStraight(Card cards[], int size) {
    int res, comb_size = SF_CMB_LEN;

    for (int i = 0; i < size - 4; i++) {
		res = i + SF_CMB_LEN;

        for (int j = 0; j < comb_size; j++) {
            if (OUT_OF_BOUNDS(i + j + 1, size)) {
                return NOT_COMBINATION;
			}

            if (!IS_STRAIGHT(cards[i + j].value, cards[i + j + 1].value)) {
				if (IS_PAIR(cards[i + j].value, cards[i + j + 1].value)) {
                    comb_size++;
				} else {
                    res = FALSE;
                }
            }
		}

        if (res) {
			while (STRAIGHT_CONTINUES(res, size, cards[res].value, cards[res + 1].value)){
				res++;
			}

            return (char)(cards[res].value + 1);
        }
	}

    return NOT_COMBINATION;
}

char cmbFlush(Card cards[], int* left, int size) {
    int res;

    for (*left = 0; *left < size - 4; (*left)++) {
		res = *left + SF_CMB_LEN;

        for (int j = 0; j < SF_CMB_LEN; j++) {
            if (cards[*left + j].suit != cards[*left + j + 1].suit) {
				res = FALSE;
				break;
            }
		}

		if (res) {
			while (FLUSH_CONTINUES(res, size, cards[res].suit, cards[res + 1].suit)){
				res++;
			}

			return (char)(cards[res].value + 1);
        }
	}

    return NOT_COMBINATION;
}

char cmbFullHouse(Card cards[], int size) {
    int l0 = 0, l1 = 0;
    char pairFirst, threeOfAKindFirst, pairSecond, threeOfAKindSecond;

    pairFirst = cmbPair(cards, &l0, size);
    threeOfAKindFirst = cmbThreeOfAKind(cards, &l0, size);
	threeOfAKindSecond = cmbThreeOfAKind(cards, &l1, size);
    pairSecond = cmbPair(cards, &l1, size);

    if (pairFirst && threeOfAKindFirst) {
        return (char)(cards[l0 - 1].value + 1);
    }
    if (pairSecond && threeOfAKindSecond) {
        return (char)(cards[l1 - 1].value + 1);
	}

    return NOT_COMBINATION;
}

char cmbFourOfAKind(Card cards[], int size) {
    for (int i = 0; i < size - 3; i++) {
        if (IS_FOUR_OF_A_KIND(cards[i].value, cards[i + 1].value, cards[i + 2].value, cards[i + 3].value)) {
            return (char)(cards[i + 3].value + 1);
        }
	}

    return NOT_COMBINATION;
}

char cmbStraightFlush(Card cards[], int size) {
    int l = 0;
    char flush, straight;

    flush = cmbFlush(cards, &l, size);
    straight = cmbStraight(cards, size);

    if (IS_STRAIGHT_FLUSH(straight, flush)) {
        return (char)(flush);
	}

    return NOT_COMBINATION;
}

char cmbRoyalFlush(Card cards[], int size) {
    if (cmbStraightFlush(cards, size)) {
        for (int i = size - 3; i < size; i++) {
            if (IS_ROYAL_FLUSH(cards[i].value, cards[i - 1].value, cards[i - 2].value,
                cards[i - 3].value, cards[i - 4].value)) {
                return ACE + 1;
            }
        }
	}

    return NOT_COMBINATION;
}

Card* sortValue(Card arr[], int first, int last) {
	if (first < last) {
        int left = first, right = last;
        char middle = arr[(left + right) / 2].value;

        do {
            while (arr[left].value < middle) {
                left++;
            }
            while (arr[right].value > middle) {
                right--;
            }
            if (left <= right) {
                Card tmp = arr[left];
                arr[left] = arr[right];
                arr[right] = tmp;
                left++;
                right--;
            }
		} while (left <= right);

        sortValue(arr, first, right);
        sortValue(arr, left, last);
	}

    return arr;
}

void sortNum(int arr[], int first, int last) {
    if (first < last) {
        int left = first, right = last, middle = arr[(left + right) / 2];

        do {
            while (arr[left] < middle) {
                left++;
            }
            while (arr[right] > middle) {
                right--;
            }
            if (left <= right) {
				int tmp = arr[left];
                arr[left] = arr[right];
				arr[right] = tmp;
                left++;
                right--;
			}
        } while (left <= right);
        sortNum(arr, first, right);
        sortNum(arr, left, last);
	}
}

int* cardToInt(Card crd[], int size) {
    int* res = (int*)malloc(size * sizeof(int));

    for (int i = 0; i < size; i++) {
        res[i] = crd[i].suit * VALUES + crd[i].value;
	}

    return res;
}

Card* intToCard(const int crdCodes[], int size) {
    Card* res = (Card*)malloc(size * sizeof(Card));

    for (int i = 0; i < size; i++) {
        res[i].suit = (char)(crdCodes[i] / VALUES);
		res[i].value = (char)(crdCodes[i] % VALUES);
	}

    return res;
}

Card* sortCards(Card crd[], int size) {
    int* crdCodes = cardToInt(crd, size);

    sortNum(crdCodes, 0, size - 1);
	crd = intToCard(crdCodes, size);

    return crd;
}

int defineComb(Card cards[], Player* player, int size) {
	int l;
    char isCombination;

	cards = sortCards(cards, size);
	isCombination = cmbRoyalFlush(cards, size);
	if (isCombination) {
        player->bestCardValue = isCombination;
        return ROYAL_FLUSH;
	}

    isCombination = cmbStraightFlush(cards, size);
	if (isCombination) {
        player->bestCardValue = isCombination;
        return STRAIGHT_FLUSH;
	}

	cards = sortValue(cards, 0, size - 1);
	isCombination = cmbFourOfAKind(cards, size);
	if (isCombination) {
        player->bestCardValue = isCombination;
        return FOUR_OF_A_KIND;
	}

    isCombination = cmbFullHouse(cards, size);
    if (isCombination) {
        player->bestCardValue = isCombination;
        return FULL_HOUSE;
	}

	l = 0;
    isCombination = cmbFlush(sortCards(cards, size), &l, size);
    if (isCombination) {
        player->bestCardValue = isCombination;
        return FLUSH;
	}

	cards = sortValue(cards, 0, size - 1);
	isCombination = cmbStraight(cards, size);
	if (isCombination) {
		player->bestCardValue = isCombination;
		return STRAIGHT;
	}

	l = 0;
    isCombination = cmbThreeOfAKind(cards, &l, size);
    if (isCombination) {
		player->bestCardValue = isCombination;
        return THREE_OF_A_KIND;
	}

	isCombination = cmbTwoPairs(cards, size);
	if (isCombination) {
		player->bestCardValue = isCombination;
		return TWO_PAIRS;
	}

	l = 0;
	isCombination = cmbPair(cards, &l, size);
    if (isCombination) {
		player->bestCardValue = isCombination;
		return PAIR;
	}

    isCombination = HIGH_CARD;
	player->bestCardValue = isCombination;

    return HIGH_CARD;
}

int findCombinations(Card tblCard[], Player* plr, int tblCardsSize) {
    int combination, size = tblCardsSize + PLAYER_CARDS;
    Card* crdAll = (Card*)malloc((size) * sizeof(Card));

    for (int i = 0; i < tblCardsSize; i++) {
		crdAll[i] = tblCard[i];
	}
	for (int i = 0; i < PLAYER_CARDS; i++) {
        crdAll[tblCardsSize + i] = plr->layout[i];
	}

	combination = defineComb(crdAll, plr, size);

	free(crdAll);

	return combination;
}

int* fillCombinationCodes(Player plr[], Table tbl, int size) {
	int* cmb = (int*)malloc(size * sizeof(int));

    for (int i = 0; i < size; i++) {
        if (plr[i].isPlaying) {
            cmb[i] = findCombinations(tbl.layout, &(plr[i]), RIVER_CARDS);
		} else {
			cmb[i] = -1;
		}
	}

	return cmb;
}

int checkEqualCombs(int arr[], int ind, int size) {
    int equal = FALSE;

    for (int i = 0; i < size; i++) {
        if (arr[i] == arr[ind] && i != ind) {
            equal = TRUE;
		} else if (arr[i] != arr[ind]) {
            arr[i] = FALSE;
        }
	}

    return equal;
}

void findHigherBestCard(int* arr, Player* plrs, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= plrs[i].bestCardValue;
	}
}

void findHigherCards(int* arr, Player* plrs, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= plrs[i].layout[FIRST_CARD].value * plrs[i].layout[SECOND_CARD].value;
    }
}

void splitBank(Player plrs[], Table tbl, int size) {
	for (int i = 0; i < size; i++) {
        if (plrs[i].isPlaying) {
            plrs[i].balance += tbl.atStake / 2;
        }
    }
}

void initializePlayers(Player plrs[]) {
    for (char i = 0; i < PLAYERS; i++) {
        plrs[i].layout[FIRST_CARD].suit = BACK;
        plrs[i].layout[FIRST_CARD].value = BACK;
        plrs[i].layout[SECOND_CARD].suit = BACK;
        plrs[i].layout[SECOND_CARD].value = BACK;
        plrs[i].bet = 0;
        if (plrs[i].balance) {
            plrs[i].isPlaying = TRUE;
		} else {
            plrs[i].isPlaying = FALSE;
        }
		plrs[i].isAllIn = FALSE;
        plrs[i].bestCardValue = BACK;
	}
}

void cardsDealing(Player toDeal[], Card deck[], int size) {
	for (int i = 0; i < size; i++) {
		dealCard(toDeal[i].layout, deck, FIRST_CARD);
		dealCard(toDeal[i].layout, deck, SECOND_CARD);
	}
}

void clearTable(Table* tbl) {
    for (int i = 0; i < TABLE_CARDS; i++) {
        tbl->layout[i].suit = BACK;
        tbl->layout[i].value = BACK;
	}

    tbl->atStake = 0;
	tbl->call = 0;
	tbl->cardsNum = PREFLOP_CARDS;
}

int findWinner(Player players[], Table tbl, int size) {
    int* result, max, isEqualCombinations = FALSE;

    result = fillCombinationCodes(players, tbl, size);
    max = findMaxIndex(result, size);
	isEqualCombinations = checkEqualCombs(result, max, size);

    if (isEqualCombinations) {
		findHigherBestCard(result, players, size);
	} else {
		return max;
	}

	max = findMaxIndex(result, size);
	isEqualCombinations = checkEqualCombs(result, max, size);

	if (isEqualCombinations) {
		findHigherCards(result, players, size);
	} else {
        return max;
    }

    max = findMaxIndex(result, size);
	isEqualCombinations = checkEqualCombs(result, max, size);

    if (isEqualCombinations) {
        return DRAW;
	}

    return max;
}

int preflopStrategy(Player* plr, Table* tbl) {
	if (IS_BET(plr->layout[FIRST_CARD].value, plr->layout[SECOND_CARD].value)) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO) {
			return CALL;
		}

		return BET;
    }
	if (IS_CALL(plr->layout[FIRST_CARD].value, plr->layout[SECOND_CARD].value, plr->layout[FIRST_CARD].suit,
		plr->layout[SECOND_CARD].suit, plr->balance, plr->bet)) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO){
			return CHECK;
		}

		return CALL;
	}
	if (!(tbl->call - plr->bet)) {
		return CHECK;
	}

    return FOLD;
}

int riverStrategy(Player* plr, Table* tbl, Card* cards) {
    Player fakePlayer;
    int cmb = defineComb(cards, &fakePlayer, TABLE_CARDS + PLAYER_CARDS);

	if (cmb > PAIR) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO){
			return CALL;
		}

		return BET;
	}
	if (cmb - 1) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO){
			return CHECK;
		}

		return CALL;
	}
	if (!(tbl->call - plr->bet)) {
		return CHECK;
	}

	return FOLD;
}

int middleStrategy(Player* plr, Table* tbl, Card* cards, Card deck[], int tableCards) {
    int current = 0, possible = 0;
    Player fakePlayer;

	if (defineComb(cards, &fakePlayer, TABLE_CARDS + PLAYER_CARDS) - 1) {
		current++;
	}
    for (int k = 0; k < TABLE_CARDS - tableCards; k++) {
        for (int i = 0; i < DECK_SIZE; i++) {
			if (deck[i].suit != BACK) {
				cards[tableCards + PLAYER_CARDS + k] = deck[i];
				if (defineComb(cards, &fakePlayer, tableCards + PLAYER_CARDS + 1 + k) >= STRAIGHT) {
					possible++;
				}
			}
		}
	}

	if (current && possible) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO){
			return CALL;
		}

		return BET;
    }
	if (current || possible) {
		if (plr->balance / (tbl->call - plr->bet + 1) < BET_RATIO){
			return CHECK;
		}

        return CALL;
    }
	if (!(tbl->call - plr->bet)) {
        return CHECK;
	}

    return FOLD;
}

int chooseStrategy(Player* plr, Table* tbl, Card deck[], int tableCards) {
	int res, strategy;
	Card cards[TABLE_CARDS + PLAYER_CARDS];

	if (!plr->isPlaying) {
		return OUT_OF_GAME;
	}

    if (plr->isAllIn) {
		return ALL_IN;
	}

    if (tableCards == PREFLOP_CARDS) {
        return preflopStrategy(plr, tbl);
    }

    for (int i = 0; i < tableCards; i++) {
        cards[i] = tbl->layout[i];
	}
    for (int i = 0; i < PLAYER_CARDS; i++) {
        cards[tableCards + i] = plr->layout[i];
    }

    if (tableCards == TABLE_CARDS) {
        strategy = riverStrategy(plr, tbl, cards);
        return strategy;
    }

	strategy = middleStrategy(plr, tbl, cards, deck, tableCards);

    return strategy;
}

int callAfterBets(Player* plr, Table* tbl, Card deck[], int cardsNum) {
	int strategy = chooseStrategy(plr, tbl, deck, cardsNum);

    if (strategy == BET) {
        strategy = CALL;
    }

    return strategy;
}

int bet(Player* plr, Table* tbl) {
	int bet = (int)((rand() % plr->balance) * BET_MULTIPLIER) + tbl->call - plr->bet;

	tbl->call = bet + plr->bet;
    plr->bet += bet;
    plr->balance -= bet;
    tbl->atStake += bet;

    return bet;
}

void fold(Player* plr) {
    plr->isPlaying = FALSE;
}

void call(Player* plr, Table* tbl) {
    int bet = tbl->call - plr->bet;

    plr->balance -= bet;
    tbl->atStake += bet;
    plr->bet += bet;
}

void allIn(Player* plr, Table* tbl) {
	plr->isAllIn = TRUE;
	plr->bet += plr->balance;
	plr->balance = 0;
	if (tbl->call < plr->bet) {
		tbl->call = plr->bet;
	}
}

int makeBet(Player* plr, Table* tbl, int bet) {
	int res = FALSE;

	if (bet < tbl->call - plr->bet) {
		if (bet == plr->balance) {
			if (plr->balance > tbl->call) {
				tbl->call = plr->bet + plr->balance;
			}

			plr->bet += plr->balance;
			tbl->atStake += plr->balance;
			plr->balance = 0;
			plr->isAllIn = TRUE;
			res = TRUE;
		}
	} else {
        if (bet + plr->bet > tbl->call) {
            tbl->call = bet + plr->bet;
		}

		if (bet == plr->balance) {
			plr->isAllIn = TRUE;
		}

		plr->balance -= bet;
		plr->bet += bet;

		tbl->atStake += bet;

        res = TRUE;
	}

    return res;
}

void makePlayerBet(Player* player, Table* tbl, int stake) {
	int sign;

	do {
		if (player->isAllIn) {
			sign = TRUE;
		} else {
			sign = makeBet(player, tbl, stake);
		}
	} while (!sign);
}

void playersTurn(Player* player, Table* tbl, int tblCrdNum, int stake) {
	if (player->balance && player->isPlaying) {
		makePlayerBet(player, tbl, stake);
	}
}

void initBalance(Player plrs[]) {
    for (int i = 0; i < PLAYERS; i++) {
        plrs[i].balance = START_BALANCE;
    }
}
